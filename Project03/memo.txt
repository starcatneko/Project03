"メモのメモ"
タグの説明
 ##		項目名
 $$		復習
 **		やることメモ
 !!		授業との差異
 ~~		メモ

 !!		VBA 出力

 ~~	defineで()を使う意味
 ヘッダーを複数のソースファイルから読み込んだ際に
 再定義を回避することができる。

 ** 時間計測をできるようにする(ms単位)
 
 ~11/19
 駒の反転が終わるまで、ターンを切り替えないように
 処理を修正する。

 
 ** PIECE_STのインクリメントがうまく動かない！！！

 ##	static_cast
 static_cast<型>(変数名);

 ** 操作をPlayerのTurnAct経由にする
	AI操作できるようにする

 ##　AI
 CPU操作の場合、
 現在プレイヤーのマウスから取得している情報（ボタン入力、座標）
 をAIで計算させた内容で入力できるようにする

 置ける場所リストを参照する
 CPUにBoardをコピーしたものを用意させ、
 Boardに置いた際の盤面の状況をシミュレートさせる



 ## AI - 評価方式
有利な状況・不利な状況を
置ける場所を見てそれぞれ点数を出す
その点数で置く場所を決める


 ** 最終課題
 オセロにAI実装

 加点〜〜〜
 AI同士の頂上決戦
 最強のAI戦士は誰だ！？
 （ネットワークを駆使する


 std::underlying_type<~~~>::type(~~~)

 ## auto itr:○○
	beginとendが無ければ使えない
	（自分で作れる!)

 ** 11/1 ~ 11/9
	「アナログゲームの駒（カード）を使って、
	パズルゲームを作る。」の期間


複数の視点から考える設計
	受動的な処理、自律的な処理…
	後々の実装等を考えて、効率や安全性を考える。

 ** ひっくり返す処理をパターン別に、切り替えて試行できるように実装する
	（列ごとに順番にひっくり返す）
	（放射状にひっくり返す）
	駒のリバース中に枠の外をクリックして、リバースのアニメーションをスキップ

	・駒ごとにリバースさせる順番を持たせる
	リバース処理をするときに、ひっくり返す順番を持たせる
	↓
	順番に合わせてひっくり返す処理をする
	
	柔軟にいこう！

 
 こんな感じ
extern int dataTbl[DATA_CHAR_MAX][DATA_STATE_MAX]= {
	//説明	,説明	,説明	,説明	
	{	0	,	0	,	0	,	0	},		//charA
	{	0	,	0	,	0	,	0	},		//charB
	{	0	,	0	,	0	,	0	},		//charC
	{	0	,	0	,	0	,	0	}		//charD
}


 !! プレイヤー遷移関数をGameMainに依存させる

 **2018/10/26
 ラムダ式 (無名関数)

	[](){};		// 最小のラムダ式
	[] ...キャプチャー部
	() ...引数部(引数が無い場合は省略できる)
	{} ...実行部
	の三つで構成されている。

	(キャプチャー部の型は宣言しなくてよい)

	auto 〇〇〇 = [](){};
	式の結果を保存できる(auto型を使う)
	   ↓ コピーキャプチャー
	[p = m]   
	   ↓ 参照キャプチャー
	[p & m]

	~~~~~~~~~~~~~~~~~~~~~
	auto prg =  [](int j){ return j + 10};
	prg(5);			// 返り値は15
	~~~~~~~~~~~~~~~~~~~~~
	int m = 3;
	auto prg = [p = m](int k){
		int j = k+p;		// pにm (int 3)が入っている
		j+=2;
		return j;			//kが3の場合、 3+3+2 で8
	}

	m = 5;
	int num = prg(3); //キャプチャー部でコピーしていたmの値が変わると…
	//　コピーキャプチャーの場合、pはmの変更前の値になる
	~~~~~~~~~~~~~~~~~~~~~
	auto prg = [ = ](int k){
		int j = k + m;
		return j;
		}		// キャプチャー部に=のみを書いた場合、
				// 実行部に合わせてコピーキャプチャーをしてくれる
				// （参照キャプチャーでも同じ）
	~~~~~~~~~~~~~~~~~~~~~
	ラムダ式では、外部の変数は使えない
	ラムダ式内で外部の変数を読みたい場合は、
	キャプチャー部や引数部で渡さないといけない。

	参照キャプチャーの場合、
	式を呼び出す前に参照先が解放されていた場合
	があるので危険



 **
 今まで
  Player
  >PieceTray
   >PieceAAA
   >PieceBBB
   >PieceCCC

 今回
 Player
 >PeceTray
 　>GamePiece　
	>PieceState
	 > AAA(能力〜)
	 > BBB(能力〜)
	 > …etc

	 能力のリスト
			能力A 能力B 能力C...etc
	piece1	|	1|	 0|	  1|		//所持しているスキル...1
	piece2	|	1|	 1|	  0|
	piece3	|	0|	 1|	  1|
	   /リストはExcelで作る

	 下記の形式で扱えるように
	 unsigned int chordStateList = {
	 {1,0,1,0}	//AAA
	 {1,1,0,0}	//BBB
	 }

	 動かす側は「Stateを動かすだけ」


 ##class と struct の違い
 デフォルト（明記されていない場合）のメンバの属性が
 classの場合 private
 structの場合 public
 になる


 PlayerのコンストラクタでPieceTrayを作る
PieceTrayのコンストラクタでPieceの最大数を取得する為にBoardからサイズを取得したい
Boardのサイズが決まる前（そもそもBoardが生まれる前）なのでエラー
そもそもそもそも、BoardをGameMainで作った場合に、
PlayerからGameMainが持っている
BoardのGetszieをする方法が無い



!! GameBoard
GameTitle 存在せず
GameMain 一週目で作成
GameResult 終了時（Titleに戻るときにリセット)

Sharedで作成
GameResultの引数付きコンストラクタで
GameMainが持っているGameBoardのSharedポインタを
渡す
Resultを抜けた時にポインタのカウントが切れて
自動的にGameBoardが消える（リセットできる）


 $$ stateパターン
 Update()の返り値に型のアドレスを渡す
 同じstateを繰り返したい場合、自分が入っているポインターを返す
 (*thisを返すのはダメ！！！)



 $$ 関数ポインタの代入
 	ポインタ名 = &クラス名::関数名;
	例)
	void (GameTask::*CurrentScene)();
	CurrentScene = &GameTask::Result;



 **Stateパターンでゲームモードを作る

何度回しても初期値から変わらないのはautoが参照ではない可能性がびれ損・・・？

 ** 宿題
 AddPieceの前にやらないといけない事を
 やる。
 （ダミーでいいので何かを入れる？）

 ** PieceTray
 手ごまが無くなった場合
 ノーマル駒を生み出す

 !! PlayerはGameTaskが持っている
	（GameBoard側ではない)


 PieceTrayの描画
 1.PieceTrayの土台を描画
 2.土台を基準にピースを描画
 （PieceTrayのピースのDrauOffsetを土台の基準点にする）
 
void PieceTray::SelectTrayPiece(VECTOR2 pos)
{

}

 ** 10/09 ~ 10/12
	1.キャラ駒の配置


 ## OutputDebugString()
	出力ウィンドウに任意のテキストを表示する
	書式付き文字列は表示できない。

 ## unique_ptrの真偽
	unique_ptrが真の場合存在
	偽の場合は存在していない
	
	if(unique_ptr)	// unique_ptrが存在する場合ifの中に入る
	{
	
	}

 ## デザインパターン state
 Stateパターン
  抽象化したクラス→継承
  メンバは全部純粋仮想関数
  例)クラス PieceState
	 virtual int GetDrawColor() = 0;
	 ↓
	 継承クラス PieceBlack
	 int GetDrawColor() {~~~~return ~~;}

 ** チェック方向のベクトル
 チェック方向を正規化したベクトル
 VECTOR2でテーブルを作る

 player1
 player2

 current pl1
 setpiece
 nextpl plList.next
 current pl2 
 setpiece
 plList.end == current
 ->plList.bigin



 ** おせろ設計
 |→・二人が順に駒を置く（置けないときはスキップ）←-----|
 | ・相手の駒を１個以上　ひっくり返せるか？		(ひっくり返せない)
 | ↓
 | ・駒を置く
 | ↓
 |-・駒をひっくり返す処理

 二人がひっくり返せない場合、ゲーム終了
 ↓
 結果

 GameTask()
	→	
	GameBoard()
		→
		std::list<player>playerList()



 **宿題0913
 シングルトンをGameTaskの形に（デストラクタのPrivate化、Destroy、Create削除）

 ##デストラクタのprivate化
	デストラクタをprivateに書くことで、
	「このクラスを消さないでほしい」という意図を
	表現することができる。
	プログラムの書き方で意思を伝えることが大事

 ##default deleter
	通常はデストラクタ
	unique_ptrの省略可能な第二引数
	デストラクタをprivateで書く場合、
	deleterを作らなければならない
	unique_ptrの第二引数に渡すdeleterは、
	関数オブジェクトで作成する

## 関数オブジェクト
調べよ

## autoとitr
<list>
 |-(itr) -> データ
 |-(itr) -> データ
 |-(itr) -> データ

auto k = piecelist.bigin();
	auto はlistのitrになる
	（型に対して auto)

auto l:piecelist;
	auto はデータになる
	(list全体に対して auto)

	list自体を扱いたい場合は
	前者の書き方じゃないとダメ



リストじゃあああああああ
LRを参照

GameBoard
クリックされた場所をもとに盤面に駒を置く
駒が置かれたら駒のクラス(GamePiece)をインスタンス

置かれた駒が特殊駒だった場合、さらに特殊駒のクラス(GamePiece)を
同じ位置にインスタンスする。

GamePiece
GameBoardにGamePieceのリストを作成する
インスタンスされたらGamePieceのリストにpushする

**隣接する駒を検索する関数つくる


GameBoard
↓
GamePiece
↓
Piece→個別Pieceクラス

=========
→ : 継承

隣接する駒の検索および反転はGameBoardクラスで行うのがよい？